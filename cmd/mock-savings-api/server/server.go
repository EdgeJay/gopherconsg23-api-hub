// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
//
// Customised for GopherconSG 2023

package server

import (
	"fmt"
	"net/http"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// Defines values for SavingsRecordType.
const (
	Offset SavingsRecordType = "offset"
	Salary SavingsRecordType = "salary"
	Self   SavingsRecordType = "self"
)

// GetSavingsRecordsSuccessResponse defines model for GetSavingsRecordsSuccessResponse.
type GetSavingsRecordsSuccessResponse struct {
	Data *[]Savings `json:"data,omitempty"`
}

// Savings defines model for Savings.
type Savings struct {
	// Amount Should be float number up to 2 decimal places
	Amount *float32 `json:"amount,omitempty"`

	// CreatedOn Date/time when record was created
	CreatedOn *string `json:"created_on,omitempty"`

	// RecordType Types of savings record_type:
	//   * `salary` - Savings from salary
	//   * `self` - Self contribution
	//   * `offset` - Financial offset packages
	RecordType *SavingsRecordType `json:"record_type,omitempty"`
}

// SavingsRecordType Types of savings record_type:
//   - `salary` - Savings from salary
//   - `self` - Self contribution
//   - `offset` - Financial offset packages
type SavingsRecordType string

// GetResidentSavingsRecordsParams defines parameters for GetResidentSavingsRecords.
type GetResidentSavingsRecordsParams struct {
	Page *int `form:"page,omitempty" json:"page,omitempty"`
	Size *int `form:"size,omitempty" json:"size,omitempty"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /savings-records)
	GetResidentSavingsRecords(ctx echo.Context, params GetResidentSavingsRecordsParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetResidentSavingsRecords converts echo context to params.
func (w *ServerInterfaceWrapper) GetResidentSavingsRecords(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetResidentSavingsRecordsParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", ctx.QueryParams(), &params.Size)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter size: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetResidentSavingsRecords(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/savings-records", wrapper.GetResidentSavingsRecords)

}

type MockServerInterface struct {}

func (si *MockServerInterface) GetResidentSavingsRecords(ctx echo.Context, params GetResidentSavingsRecordsParams) error {
	type hello struct {
		Message string `json:"message"`
	}
	h := hello{"Hello World!"}
	return ctx.JSON(200, h)
}

// Wrapper around call to RegisterHandlers
// and supply handlers with mock data
func RegisterHandlersWithMockData(router EchoRouter) {

	var si MockServerInterface

	RegisterHandlers(router, &si)
}
